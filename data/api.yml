# The data definition of ExcelCy.

# main configuration for the training.
config:
  # initial spaCy data model to begin with. Described in https://spacy.io/models/
  nlp_base: en_core_web_sm
  # existing/new spaCy data model path. It accepts, absolute/relative path.
  nlp_name: /data/test-data
  # process prepare phase
  prepare_enabled: true
  # N iteration to train based on https://spacy.io/usage/training#annotations
  train_iteration: 2
  # X dropout rate based on https://spacy.io/usage/training#tips-dropout
  train_drop: 0.2
# list API execution to control the journey
phase:
  items:
    '1':
      idx: 1
      enabled: true
      notes: null
      fn: save_nlp
      args:
        key1: val1
        key2: val2
    '2':
      idx: 2
      enabled: true
      notes: null
      fn: discover
      args: {}
# data source to train
source:
  items:
    '0':
      idx: '0'
      # data source type either "text" or "textract"
      kind: text
      # the raw sentence if text, otherwise relative/absolute path to file
      value: Uber blew through $1 million a week. Android Pay expands to Canada.
    '1':
      idx: '1'
      kind: textract
      # this is the source path
      value: source/test_source_01.txt
# extra pipelines to do pre-train Entity identification
prepare:
  items:
    '0':
      idx: '0'
      kind: phrase
      value: google
      entity: PRODUCT
    '1':
      idx: '1'
      kind: regex
      value: Uber?
      entity: ORG
train:
  items:
    '0':
      idx: '0'
      text: Uber blew through $1 million a week.
      items:
        '0.0':
          idx: '0.0'
          subtext: Uber
          entity: ORG
        '0.1':
          idx: '0.1'
          subtext: $1 million
          entity: MONEY
    '1':
      idx: '1'
      text: Android Pay expands to Canada.
      items:
        '1.0':
          idx: '1.2'
          subtext: Android Pay
          span: [0, 11]
          entity: PRODUCT
